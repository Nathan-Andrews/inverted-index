C# Arrays Documentation

Table of Contents:
1. Introduction
2. Declaring and Initializing Arrays
3. Accessing Array Elements
4. Array Length
5. Iterating Through Arrays
6. Multidimensional Arrays
7. Arrays vs. Lists
8. Common Array Methods

1. Introduction:
An array in C# is a collection of elements of the same data type that are stored in contiguous memory locations. Arrays provide a convenient way to work with a group of values of the same type. This documentation covers the basics of using arrays in C#.

2. Declaring and Initializing Arrays:
To declare an array in C#, you specify the data type, followed by the array name and square brackets ([]) to indicate that it is an array. You can declare and initialize an array in various ways:


int[] numbers; // Declare an integer array
int[] numbers = new int[5]; // Create an integer array with 5 elements
int[] numbers = { 1, 2, 3, 4, 5 }; // Initialize an integer array with values


3. Accessing Array Elements:
Array elements are accessed by their index, starting from zero. To access an element, use the array name followed by square brackets containing the index.


int[] numbers = { 10, 20, 30, 40, 50 };
int value = numbers[2]; // Access the third element (30)


4. Array Length:
You can determine the length (number of elements) of an array using the `Length` property. This property is available for all arrays.


int[] numbers = { 1, 2, 3, 4, 5 };
int length = numbers.Length; // Length is 5


5. Iterating Through Arrays:
To process all elements in an array, you can use loops, such as `for` or `foreach`. The `for` loop allows you to iterate using indices, while the `foreach` loop simplifies iteration over elements.


int[] numbers = { 1, 2, 3, 4, 5 };
foreach (int number in numbers)
{
    // Process each element (number)
}


6. Multidimensional Arrays:
C# supports multidimensional arrays, such as two-dimensional (2D) arrays and jagged arrays. 2D arrays have rows and columns, while jagged arrays are arrays of arrays.


int[,] matrix = new int[3, 3]; // 2D array
int[][] jaggedArray = new int[3][];


7. Arrays vs. Lists:
Arrays have a fixed size, and once created, their length cannot be changed. Lists, on the other hand, are part of the System.Collections.Generic namespace and are more flexible, as they can dynamically grow or shrink. You may choose between arrays and lists based on your specific requirements.

8. Common Array Methods:
C# provides a range of methods for working with arrays, such as `Array.Sort`, `Array.Reverse`, and `Array.Copy`. These methods simplify common array operations.


int[] numbers = { 5, 2, 8, 1, 7 };
Array.Sort(numbers); // Sort the array in ascending order


In conclusion, arrays are fundamental data structures in C# for storing collections of elements of the same data type. Understanding array declaration, initialization, and manipulation is essential for building efficient and organized applications that involve working with multiple values.